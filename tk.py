
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext, simpledialog, font
import webbrowser
import os
import re
import compile as c
import mcmd as cmd
import requests
import json
import threading
from datetime import datetime
import time
import subprocess
import ast
import keyword

i = 0

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ò–ò-–∞–≥–µ–Ω—Ç–∞ ===
OLLAMA_URL = "http://localhost:11434/api/generate"
MODEL = "tinyllama"
REQUEST_TIMEOUT = 90

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""


def process_content(content):
    """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤"""
    return content.replace('**', '').replace('*', '').strip()


class LineNumbers(tk.Canvas):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫"""

    def __init__(self, parent, text_widget, **kwargs):
        super().__init__(parent, **kwargs)
        self.text_widget = text_widget
        self.configure(
            width=50,
            bg="#2d2d2d",
            highlightthickness=0,
            borderwidth=0
        )

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.text_widget.bind('', self.redraw)
        self.text_widget.bind('', self.redraw)
        self.text_widget.bind('', self.redraw)
        self.text_widget.bind('', self.redraw)
        self.text_widget.bind('', self.redraw)

    def redraw(self, event=None):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫"""
        self.delete("all")

        try:
            first_line = self.text_widget.index("@0,0")
            line_num = int(first_line.split('.')[0])

            y_pos = 0
            while True:
                try:
                    dline_info = self.text_widget.dlineinfo(f"{line_num}.0")
                    if dline_info is None:
                        break

                    line_y = dline_info[1]

                    self.create_text(
                        45, line_y + 10,
                        anchor="e",
                        text=str(line_num),
                        fill="#858585",
                        font=("Consolas", 10)
                    )

                    line_num += 1

                    if line_y > self.text_widget.winfo_height():
                        break

                except tk.TclError:
                    break
        except:
            pass

        self.after_idle(self.sync_scroll)

    def sync_scroll(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–∏–¥–∂–µ—Ç–æ–º"""
        try:
            top, bottom = self.text_widget.yview()
            self.configure(scrollregion=self.bbox("all"))
        except:
            pass


class AutoCompleteEntry(tk.Text):
    """–í–∏–¥–∂–µ—Ç —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–ª—è Python"""

    def __init__(self, parent, **kwargs):
        super().__init__(parent, **kwargs)

        # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ Python
        self.keywords = keyword.kwlist + [
            'print', 'input', 'len', 'range', 'str', 'int', 'float', 'list', 'dict', 'tuple',
            'set', 'bool', 'type', 'isinstance', 'hasattr', 'getattr', 'setattr', 'delattr',
            'open', 'close', 'read', 'write', 'readline', 'readlines', 'split', 'join',
            'append', 'extend', 'insert', 'remove', 'pop', 'index', 'count', 'sort', 'reverse',
            'keys', 'values', 'items', 'get', 'update', 'clear', 'copy'
        ]

        self.popup = None
        self.bind('', self.on_key_release)
        self.bind('', self.hide_popup)

    def on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if event.keysym in ['Up', 'Down', 'Left', 'Right', 'Return', 'Tab']:
            self.hide_popup()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
        current_pos = self.index(tk.INSERT)
        line_start = current_pos.split('.')[0] + '.0'
        line_text = self.get(line_start, current_pos)

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
        words = re.findall(r'\w+', line_text)
        if words:
            current_word = words[-1]
            if len(current_word) >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
                matches = [kw for kw in self.keywords if kw.startswith(current_word) and kw != current_word]
                if matches:
                    self.show_popup(matches[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                else:
                    self.hide_popup()
            else:
                self.hide_popup()
        else:
            self.hide_popup()

    def show_popup(self, matches):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        if self.popup:
            self.popup.destroy()

        self.popup = tk.Toplevel(self)
        self.popup.wm_overrideredirect(True)
        self.popup.configure(bg="#2d2d2d")

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        x = self.winfo_rootx() + 50
        y = self.winfo_rooty() + 50
        self.popup.geometry(f"+{x}+{y}")

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        listbox = tk.Listbox(self.popup, bg="#2d2d2d", fg="#d4d4d4",
                             selectbackground="#007acc", height=min(len(matches), 10))
        listbox.pack()

        for match in matches:
            listbox.insert(tk.END, match)

        listbox.bind('', lambda e: self.insert_completion(listbox.get(listbox.curselection())))
        listbox.bind('', lambda e: self.insert_completion(listbox.get(listbox.curselection())))

    def insert_completion(self, completion):
        """–í—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
        current_pos = self.index(tk.INSERT)
        line_start = current_pos.split('.')[0] + '.0'
        line_text = self.get(line_start, current_pos)

        words = re.findall(r'\w+', line_text)
        if words:
            current_word = words[-1]
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–µ–ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
            word_start = current_pos.split('.')[0] + '.' + str(int(current_pos.split('.')[1]) - len(current_word))
            self.delete(word_start, current_pos)
            # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–ª–æ–≤–æ
            self.insert(word_start, completion)

        self.hide_popup()

    def hide_popup(self, event=None):
        """–°–∫—Ä—ã—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ"""
        if self.popup:
            self.popup.destroy()
            self.popup = None


class CodeAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"""

    def __init__(self):
        self.errors = []
        self.warnings = []

    def analyze(self, code):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ Python"""
        self.errors = []
        self.warnings = []

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
            ast.parse(code)
        except SyntaxError as e:
            self.errors.append({
                'line': e.lineno,
                'message': f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.msg}",
                'type': 'error'
            })

        # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
        lines = code.split('\n')
        for i, line in enumerate(lines, 1):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
            if len(line) > 120:
                self.warnings.append({
                    'line': i,
                    'message': "–°—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (>120 —Å–∏–º–≤–æ–ª–æ–≤)",
                    'type': 'warning'
                })

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
            if line.strip().startswith('import ') and 'import' in line:
                module_name = line.strip().split()[1].split('.')[0]
                if module_name not in code.replace(line, ''):
                    self.warnings.append({
                        'line': i,
                        'message': f"–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç: {module_name}",
                        'type': 'warning'
                    })

        return self.errors + self.warnings


class ProjectExplorer:
    """–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞"""

    def __init__(self, parent, app):
        self.parent = parent
        self.app = app
        self.current_path = os.getcwd()

        self.frame = tk.Frame(parent, bg="#252526")
        self.frame.pack(fill=tk.BOTH, expand=True)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Label(self.frame, text="–ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞",
                          bg="#252526", fg="#d4d4d4", font=("Segoe UI", 10, "bold"))
        header.pack(pady=5)

        # –î–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤
        self.tree = ttk.Treeview(self.frame)
        self.tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.tree.bind('', self.on_double_click)
        self.tree.bind('', self.show_context_menu)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.load_directory(self.current_path)

    def load_directory(self, path):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –¥–µ—Ä–µ–≤–æ"""
        self.tree.delete(*self.tree.get_children())

        try:
            for item in sorted(os.listdir(path)):
                item_path = os.path.join(path, item)
                if os.path.isdir(item_path):
                    self.tree.insert('', 'end', text=f"üìÅ {item}", values=[item_path])
                else:
                    icon = "üêç" if item.endswith('.py') else "üìÑ"
                    self.tree.insert('', 'end', text=f"{icon} {item}", values=[item_path])
        except PermissionError:
            pass

    def on_double_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        selection = self.tree.selection()
        if selection:
            item = self.tree.item(selection[0])
            file_path = item['values'][0]

            if os.path.isfile(file_path):
                self.app.open_file_from_explorer(file_path)
            else:
                self.load_directory(file_path)
                self.current_path = file_path

    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        context_menu = tk.Menu(self.parent, tearoff=0)
        context_menu.add_command(label="–ù–æ–≤—ã–π —Ñ–∞–π–ª", command=self.new_file)
        context_menu.add_command(label="–ù–æ–≤–∞—è –ø–∞–ø–∫–∞", command=self.new_folder)
        context_menu.add_separator()
        context_menu.add_command(label="–û–±–Ω–æ–≤–∏—Ç—å", command=lambda: self.load_directory(self.current_path))

        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()

    def new_file(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª"""
        name = simpledialog.askstring("–ù–æ–≤—ã–π —Ñ–∞–π–ª", "–ò–º—è —Ñ–∞–π–ª–∞:")
        if name:
            file_path = os.path.join(self.current_path, name)
            try:
                with open(file_path, 'w') as f:
                    f.write("")
                self.load_directory(self.current_path)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {e}")

    def new_folder(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–ø–∫—É"""
        name = simpledialog.askstring("–ù–æ–≤–∞—è –ø–∞–ø–∫–∞", "–ò–º—è –ø–∞–ø–∫–∏:")
        if name:
            folder_path = os.path.join(self.current_path, name)
            try:
                os.makedirs(folder_path)
                self.load_directory(self.current_path)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}")


class FindReplaceDialog:
    """–î–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–º–µ–Ω—ã"""

    def __init__(self, parent, text_widget):
        self.parent = parent
        self.text_widget = text_widget
        self.window = None

    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥"""
        if self.window:
            self.window.focus()
            return

        self.window = tk.Toplevel(self.parent)
        self.window.title("–ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞")
        self.window.geometry("400x200")
        self.window.configure(bg="#2d2d2d")

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        tk.Label(self.window, text="–ù–∞–π—Ç–∏:", bg="#2d2d2d", fg="#d4d4d4").grid(row=0, column=0, sticky="w", padx=5,
                                                                              pady=5)
        self.find_entry = tk.Entry(self.window, width=30, bg="#1e1e1e", fg="#d4d4d4")
        self.find_entry.grid(row=0, column=1, padx=5, pady=5)

        # –ü–æ–ª–µ –∑–∞–º–µ–Ω—ã
        tk.Label(self.window, text="–ó–∞–º–µ–Ω–∏—Ç—å:", bg="#2d2d2d", fg="#d4d4d4").grid(row=1, column=0, sticky="w", padx=5,
                                                                                 pady=5)
        self.replace_entry = tk.Entry(self.window, width=30, bg="#1e1e1e", fg="#d4d4d4")
        self.replace_entry.grid(row=1, column=1, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.window, bg="#2d2d2d")
        button_frame.grid(row=2, column=0, columnspan=2, pady=10)

        tk.Button(button_frame, text="–ù–∞–π—Ç–∏", command=self.find_next,
                  bg="#007acc", fg="white").pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="–ó–∞–º–µ–Ω–∏—Ç—å", command=self.replace_current,
                  bg="#007acc", fg="white").pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ", command=self.replace_all,
                  bg="#007acc", fg="white").pack(side=tk.LEFT, padx=5)

        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à
        self.find_entry.bind('', lambda e: self.find_next())
        self.window.protocol("WM_DELETE_WINDOW", self.close)

        self.find_entry.focus()

    def find_next(self):
        """–ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ"""
        search_text = self.find_entry.get()
        if not search_text:
            return

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.text_widget.tag_remove("search", "1.0", tk.END)

        # –ò—â–µ–º —Ç–µ–∫—Å—Ç
        start_pos = self.text_widget.search(search_text, tk.INSERT, tk.END)
        if start_pos:
            end_pos = f"{start_pos}+{len(search_text)}c"
            self.text_widget.tag_add("search", start_pos, end_pos)
            self.text_widget.tag_config("search", background="#ffff00", foreground="#000000")
            self.text_widget.mark_set(tk.INSERT, end_pos)
            self.text_widget.see(start_pos)
        else:
            messagebox.showinfo("–ü–æ–∏—Å–∫", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def replace_current(self):
        """–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ"""
        if self.text_widget.tag_ranges("search"):
            replace_text = self.replace_entry.get()
            self.text_widget.delete("search.first", "search.last")
            self.text_widget.insert("search.first", replace_text)
            self.text_widget.tag_remove("search", "1.0", tk.END)

    def replace_all(self):
        """–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è"""
        search_text = self.find_entry.get()
        replace_text = self.replace_entry.get()

        if not search_text:
            return

        content = self.text_widget.get("1.0", tk.END)
        new_content = content.replace(search_text, replace_text)

        self.text_widget.delete("1.0", tk.END)
        self.text_widget.insert("1.0", new_content)

        count = content.count(search_text)
        messagebox.showinfo("–ó–∞–º–µ–Ω–∞", f"–ó–∞–º–µ–Ω–µ–Ω–æ {count} –≤—Ö–æ–∂–¥–µ–Ω–∏–π")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥"""
        self.text_widget.tag_remove("search", "1.0", tk.END)
        self.window.destroy()
        self.window = None


class ChatMessage:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""

    def __init__(self, sender, content, timestamp=None, message_type="text"):
        self.sender = sender  # "user", "ai", "system"
        self.content = content
        self.timestamp = timestamp or datetime.now()
        self.message_type = message_type  # "text", "code", "error"


class AIRequestManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –ò–ò"""

    def __init__(self, callback_func):
        self.callback = callback_func
        self.is_processing = False
        self.current_thread = None
        self.request_queue = []

    def add_request(self, prompt, context=""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        if self.is_processing:
            return False

        self.is_processing = True
        self.current_thread = threading.Thread(
            target=self._process_request,
            args=(prompt, context),
            daemon=True
        )
        self.current_thread.start()
        return True

    def _process_request(self, prompt, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            response = self._make_api_call(prompt, context)
            self.callback("success", response)
        except Exception as e:
            self.callback("error", str(e))
        finally:
            self.is_processing = False

    def _make_api_call(self, prompt, context):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–∞"""
        final_prompt = self._build_prompt(prompt, context)

        data = {
            "model": MODEL,
            "prompt": final_prompt,
            "stream": False,
            "options": {
                "temperature": 0.3,
                "top_p": 0.9,
                "max_tokens": 500,
                "stop": ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", "User:", "Human:"],
                "repeat_penalty": 1.1
            }
        }

        response = requests.post(OLLAMA_URL, json=data, timeout=REQUEST_TIMEOUT)

        if response.status_code != 200:
            raise Exception(f"API Error {response.status_code}: {response.text}")

        result = response.json()
        return result.get('response', '').strip()

    def _build_prompt(self, user_prompt, context):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        parts = [SYSTEM_PROMPT]

        if context:
            parts.append(f"\n–í–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{context}")

        parts.append(f"\n–í–æ—Ç –µ–≥–æ –∑–∞–ø—Ä–æ—Å: {user_prompt}")
        parts.append("\n–û—Ç–≤–µ—Ç:")

        return "\n".join(parts)

    def cancel_request(self):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        self.is_processing = False


class FileTab:
    def __init__(self, name="–ë–µ–∑—ã–º—è–Ω–Ω—ã–π.tcd", content="", path=None):
        self.name = name
        self.content = content
        self.path = path
        self.saved = True
        self.bookmarks = []  # –ó–∞–∫–ª–∞–¥–∫–∏ –≤ —Ñ–∞–π–ª–µ


class CodeApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("T-Code Professional - Advanced IDE")
        self.geometry("1600x900")
        self.configure(bg="#121212")

        # –¢–µ–º–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            "bg": "#121212",
            "editor_bg": "#1e1e1e",
            "editor_fg": "#d4d4d4",
            "line_numbers": "#2d2d2d",
            "tab_bg": "#252526",
            "tab_active": "#007acc",
            "btn_normal": "#3a3d41",
            "btn_hover": "#505357",
            "btn_danger": "#d73a49",
            "debugger_bg": "#1e1e1e",
            "debugger_fg": "#d4d4d4",
            "cmd_bg": "#1e1e1e",
            "cmd_fg": "#d4d4d4",
            "user_msg": "#9cdcfe",
            "ai_msg": "#ce9178",
            "system_msg": "#dcdcaa",
            "error_msg": "#f44747",
            "code_bg": "#1e1e1e",
            "chat_bg": "#252526",
            "input_bg": "#2d2d2d",
            "border": "#3e3e42"
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.chat_messages = []
        self.ai_request_manager = AIRequestManager(self._handle_ai_response)
        self.code_analyzer = CodeAnalyzer()
        self.find_replace_dialog = None
        self.current_theme = "dark"
        self.font_size = 11

        self.create_menu()
        self.create_widgets()
        self.init_enhanced_ai_agent()

        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.auto_save_timer()

    def auto_save_timer(self):
        """–¢–∞–π–º–µ—Ä –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        self.auto_save()
        self.after(300000, self.auto_save_timer)  # 5 –º–∏–Ω—É—Ç

    def auto_save(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        for i, tab in enumerate(self.file_tabs):
            if tab.path and not tab.saved:
                try:
                    _, editor, _ = self.get_editor_by_index(i)
                    content = editor.get("1.0", tk.END)
                    backup_path = tab.path + ".autosave"
                    with open(backup_path, 'w', encoding='utf-8') as f:
                        f.write(content)
                except Exception:
                    pass

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
        menubar = tk.Menu(self, bg=self.colors["bg"], fg="#d4d4d4",
                          activebackground=self.colors["btn_hover"],
                          activeforeground="#ffffff")
        self.config(menu=menubar)

        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                            activebackground=self.colors["btn_hover"],
                            activeforeground="#ffffff")
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤—ã–π —Ñ–∞–π–ª", command=self.new_file, accelerator="Ctrl+N")
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å", command=self.load_file, accelerator="Ctrl+O")
        file_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", command=self.open_folder, accelerator="Ctrl+Shift+O")
        file_menu.add_separator()
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_file, accelerator="Ctrl+S")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", command=self.save_file_as, accelerator="Ctrl+Shift+S")
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ", command=self.save_all_files, accelerator="Ctrl+Alt+S")
        file_menu.add_separator()
        file_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", command=self.close_current_file, accelerator="Ctrl+W")
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.quit, accelerator="Ctrl+Q")

        # –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
        edit_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                            activebackground=self.colors["btn_hover"],
                            activeforeground="#ffffff")
        menubar.add_cascade(label="–ü—Ä–∞–≤–∫–∞", menu=edit_menu)
        edit_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å", command=self.undo, accelerator="Ctrl+Z")
        edit_menu.add_command(label="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", command=self.redo, accelerator="Ctrl+Y")
        edit_menu.add_separator()
        edit_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut, accelerator="Ctrl+X")
        edit_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy, accelerator="Ctrl+C")
        edit_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste, accelerator="Ctrl+V")
        edit_menu.add_separator()
        edit_menu.add_command(label="–ù–∞–π—Ç–∏", command=self.show_find_replace, accelerator="Ctrl+F")
        edit_menu.add_command(label="–ù–∞–π—Ç–∏ –∏ –∑–∞–º–µ–Ω–∏—Ç—å", command=self.show_find_replace, accelerator="Ctrl+H")
        edit_menu.add_command(label="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–æ–∫–µ", command=self.goto_line, accelerator="Ctrl+G")
        edit_menu.add_separator()
        edit_menu.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=self.select_all, accelerator="Ctrl+A")
        edit_menu.add_command(label="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É", command=self.duplicate_line, accelerator="Ctrl+D")
        edit_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É", command=self.delete_line, accelerator="Ctrl+Shift+K")

        # –ú–µ–Ω—é "–í–∏–¥"
        view_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                            activebackground=self.colors["btn_hover"],
                            activeforeground="#ffffff")
        menubar.add_cascade(label="–í–∏–¥", menu=view_menu)
        view_menu.add_command(label="–£–≤–µ–ª–∏—á–∏—Ç—å —à—Ä–∏—Ñ—Ç", command=self.increase_font, accelerator="Ctrl+=")
        view_menu.add_command(label="–£–º–µ–Ω—å—à–∏—Ç—å —à—Ä–∏—Ñ—Ç", command=self.decrease_font, accelerator="Ctrl+-")
        view_menu.add_command(label="–°–±—Ä–æ—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", command=self.reset_font, accelerator="Ctrl+0")
        view_menu.add_separator()
        view_menu.add_command(label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É", command=self.toggle_theme, accelerator="Ctrl+T")
        view_menu.add_command(label="–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º", command=self.toggle_fullscreen, accelerator="F11")
        view_menu.add_separator()
        view_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏–∫", command=self.toggle_explorer, accelerator="Ctrl+B")

        # –ú–µ–Ω—é "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
        run_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                           activebackground=self.colors["btn_hover"],
                           activeforeground="#ffffff")
        menubar.add_cascade(label="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", menu=run_menu)
        run_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å", command=self.run_code, accelerator="F5")
        run_menu.add_command(label="–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ", command=self.run_in_terminal, accelerator="Ctrl+F5")
        run_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.stop_execution, accelerator="Ctrl+F2")
        run_menu.add_separator()
        run_menu.add_command(label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å", command=self.check_syntax, accelerator="F7")

        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                             activebackground=self.colors["btn_hover"],
                             activeforeground="#ffffff")
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", command=self.format_code, accelerator="Ctrl+Alt+L")
        tools_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", command=self.analyze_code, accelerator="Ctrl+Alt+I")
        tools_menu.add_command(label="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É", command=self.add_bookmark, accelerator="Ctrl+F11")
        tools_menu.add_command(label="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏", command=self.show_bookmarks, accelerator="Shift+F11")

        # –ú–µ–Ω—é "–ò–ò"
        ai_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                          activebackground=self.colors["btn_hover"],
                          activeforeground="#ffffff")
        menubar.add_cascade(label="–ò–ò", menu=ai_menu)
        ai_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", command=self.quick_ai_analysis)
        ai_menu.add_command(label="–û–±—ä—è—Å–Ω–∏—Ç—å –∫–æ–¥", command=self.explain_code)
        ai_menu.add_command(label="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è", command=self.suggest_improvements)
        ai_menu.add_command(label="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é", command=self.generate_docs)
        ai_menu.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", command=self.clear_chat)

        # –ú–µ–Ω—é "–°–ø—Ä–∞–≤–∫–∞"
        help_menu = tk.Menu(menubar, tearoff=0, bg=self.colors["bg"], fg="#d4d4d4",
                            activebackground=self.colors["btn_hover"],
                            activeforeground="#ffffff")
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        help_menu.add_command(label="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", command=self.show_shortcuts, accelerator="F1")
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)

    def is_code_related(self, question):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –∫–æ–¥–æ–º"""
        code_keywords = [
            '–æ—à–∏–±–∫–∞', '–∫–æ–¥', '–∏—Å–ø—Ä–∞–≤—å', '–ø–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'debug', '–±–∞–≥',
            '—Ñ—É–Ω–∫—Ü–∏—è', '–º–µ—Ç–æ–¥', '–∫–ª–∞—Å—Å', '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è', '—Ü–∏–∫–ª', '—É—Å–ª–æ–≤–∏–µ',
            'python', 'import', 'def', 'class', 'if', 'for', 'while',
            '—Å–∏–Ω—Ç–∞–∫—Å–∏—Å', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Å–∫—Ä–∏–ø—Ç'
        ]

        question_lower = question.lower()
        return any(keyword in question_lower for keyword in code_keywords)

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style = ttk.Style(self)
        style.theme_use("clam")

        # –°—Ç–∏–ª–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        style.configure("Custom.TNotebook",
                        background=self.colors["bg"],
                        borderwidth=0,
                        tabmargins=0)

        style.configure("Custom.TNotebook.Tab",
                        font=("Segoe UI", 9),
                        padding=8,
                        background=self.colors["tab_bg"],
                        foreground="#d4d4d4",
                        borderwidth=1)

        style.map("Custom.TNotebook.Tab",
                  background=[("selected", self.colors["tab_active"]),
                              ("active", self.colors["btn_hover"])],
                  foreground=[("selected", "#ffffff")])

        # –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å —Ç—Ä–µ–º—è —Å–µ–∫—Ü–∏—è–º–∏
        main_pane = ttk.PanedWindow(self, orient=tk.HORIZONTAL)
        main_pane.pack(fill=tk.BOTH, expand=True, padx=2, pady=2)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞
        self.left_frame = tk.Frame(main_pane, bg=self.colors["bg"], width=250)
        main_pane.add(self.left_frame, weight=0)

        # –ü—Ä–æ–≤–æ–¥–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞
        self.project_explorer = ProjectExplorer(self.left_frame, self)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
        self.create_editor_panel(main_pane)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        self.create_right_panel(main_pane)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.file_tabs = []
        self.file_editors = []
        self.new_file()

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.bind_hotkeys()

    def create_editor_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
        editor_frame = tk.Frame(parent, bg=self.colors["bg"])
        parent.add(editor_frame, weight=5)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        toolbar = tk.Frame(editor_frame, bg=self.colors["bg"], height=35)
        toolbar.pack(fill=tk.X, pady=(0, 2))
        toolbar.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        tk.Button(toolbar, text="‚ñ∂", command=self.run_code,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)
        tk.Button(toolbar, text="‚èπ", command=self.stop_execution,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)
        tk.Button(toolbar, text="üîç", command=self.show_find_replace,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)
        tk.Button(toolbar, text="üìã", command=self.format_code,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        self.file_info_label = tk.Label(toolbar, text="", bg=self.colors["bg"], fg="#858585")
        self.file_info_label.pack(side=tk.RIGHT, padx=10)

        # Notebook –¥–ª—è —Ñ–∞–π–ª–æ–≤
        self.file_notebook = ttk.Notebook(editor_frame, style="Custom.TNotebook")
        self.file_notebook.pack(fill=tk.BOTH, expand=True)
        self.file_notebook.bind(">", self.switch_file_tab)
        self.file_notebook.bind("", self.show_tab_context_menu)

    def create_right_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        right_frame = tk.Frame(parent, bg=self.colors["bg"])
        parent.add(right_frame, weight=2)

        # Notebook –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tools_notebook = ttk.Notebook(right_frame, style="Custom.TNotebook")
        self.tools_notebook.pack(fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_problems_tab()
        self.create_debugger_tab()
        self.create_cmd_tab()
        self.create_git_tab()

    def create_problems_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º (–æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)"""
        problems_frame = tk.Frame(self.tools_notebook, bg=self.colors["debugger_bg"])
        self.tools_notebook.add(problems_frame, text="–ü—Ä–æ–±–ª–µ–º—ã")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(problems_frame, bg=self.colors["debugger_bg"], height=35)
        header.pack(fill=tk.X, pady=(5, 0))
        header.pack_propagate(False)

        title = tk.Label(header, text="–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∞",
                         bg=self.colors["debugger_bg"], fg="#d4d4d4",
                         font=("Segoe UI", 10, "bold"))
        title.pack(side=tk.LEFT, padx=10, pady=8)

        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        self.problems_tree = ttk.Treeview(problems_frame, columns=("file", "line", "message"), show="tree headings")
        self.problems_tree.heading("#0", text="–¢–∏–ø")
        self.problems_tree.heading("file", text="–§–∞–π–ª")
        self.problems_tree.heading("line", text="–°—Ç—Ä–æ–∫–∞")
        self.problems_tree.heading("message", text="–°–æ–æ–±—â–µ–Ω–∏–µ")

        self.problems_tree.column("#0", width=50)
        self.problems_tree.column("file", width=100)
        self.problems_tree.column("line", width=50)
        self.problems_tree.column("message", width=300)

        self.problems_tree.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.problems_tree.bind('', self.goto_problem)

    def create_debugger_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ—Ç–ª–∞–¥—á–∏–∫–∞"""
        debugger_frame = tk.Frame(self.tools_notebook, bg=self.colors["debugger_bg"])
        self.tools_notebook.add(debugger_frame, text="–û—Ç–ª–∞–¥—á–∏–∫")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–ª–∞–¥—á–∏–∫–∞
        debug_header = tk.Frame(debugger_frame, bg=self.colors["debugger_bg"], height=40)
        debug_header.pack(fill=tk.X, pady=(8, 0))
        debug_header.pack_propagate(False)

        debug_title = tk.Label(debug_header, text="–ö–æ–Ω—Å–æ–ª—å –æ—Ç–ª–∞–¥–∫–∏",
                               bg=self.colors["debugger_bg"], fg="#d4d4d4",
                               font=("Segoe UI", 10, "bold"))
        debug_title.pack(side=tk.LEFT, padx=12, pady=10)

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = tk.Button(debug_header, text="–û—á–∏—Å—Ç–∏—Ç—å",
                              bg=self.colors["btn_danger"], fg="#ffffff",
                              font=("Segoe UI", 8),
                              relief="flat", borderwidth=0,
                              command=self.clear_debugger)
        clear_btn.pack(side=tk.RIGHT, padx=12, pady=8)

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –æ—Ç–ª–∞–¥—á–∏–∫–∞
        self.debugger = scrolledtext.ScrolledText(
            debugger_frame,
            bg=self.colors["debugger_bg"],
            fg=self.colors["debugger_fg"],
            font=("Consolas", 9),
            insertbackground=self.colors["debugger_fg"],
            selectbackground="#264f78",
            relief="flat",
            padx=12, pady=8,
            state="disabled"
        )
        self.debugger.pack(fill=tk.BOTH, expand=True, padx=8, pady=8)

        global output
        output = self.output

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self._debugger_insert("=" * 60 + "\n")
        self._debugger_insert("T-Code Professional IDE v2.0\n")
        self._debugger_insert("–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞\n")
        self._debugger_insert("=" * 60 + "\n\n")

    def create_cmd_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        cmd_frame = tk.Frame(self.tools_notebook, bg=self.colors["cmd_bg"])
        self.tools_notebook.add(cmd_frame, text="–¢–µ—Ä–º–∏–Ω–∞–ª")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        cmd_header = tk.Frame(cmd_frame, bg=self.colors["cmd_bg"], height=40)
        cmd_header.pack(fill=tk.X, pady=(8, 0))
        cmd_header.pack_propagate(False)

        cmd_title = tk.Label(cmd_header, text="–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª",
                             bg=self.colors["cmd_bg"], fg=self.colors["cmd_fg"],
                             font=("Segoe UI", 10, "bold"))
        cmd_title.pack(side=tk.LEFT, padx=12, pady=10)

        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        tk.Button(cmd_header, text="–û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_cmd,
                  bg=self.colors["btn_danger"], fg="#ffffff", font=("Segoe UI", 8),
                  relief="flat", borderwidth=0).pack(side=tk.RIGHT, padx=(0, 12), pady=8)

        tk.Button(cmd_header, text="–ù–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª", command=self.new_terminal,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", font=("Segoe UI", 8),
                  relief="flat", borderwidth=0).pack(side=tk.RIGHT, padx=5, pady=8)

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        self.cmd_output = scrolledtext.ScrolledText(
            cmd_frame,
            bg=self.colors["cmd_bg"],
            fg=self.colors["cmd_fg"],
            font=("Consolas", 9),
            insertbackground=self.colors["cmd_fg"],
            selectbackground="#264f78",
            relief="flat",
            state="disabled",
            padx=12, pady=8
        )
        self.cmd_output.pack(fill=tk.BOTH, expand=True, padx=8, pady=(8, 0))

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        cmd_input_frame = tk.Frame(cmd_frame, bg=self.colors["cmd_bg"], height=45)
        cmd_input_frame.pack(fill=tk.X, padx=8, pady=8)
        cmd_input_frame.pack_propagate(False)

        # –ü—Ä–æ–º–ø—Ç
        cmd_prompt = tk.Label(cmd_input_frame, text="T-Code>",
                              bg=self.colors["cmd_bg"], fg=self.colors["cmd_fg"],
                              font=("Consolas", 10, "bold"))
        cmd_prompt.pack(side=tk.LEFT, padx=(8, 8), pady=12)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        self.cmd_entry = tk.Entry(cmd_input_frame,
                                  bg=self.colors["input_bg"], fg=self.colors["cmd_fg"],
                                  font=("Consolas", 10),
                                  insertbackground=self.colors["cmd_fg"],
                                  relief="flat", borderwidth=1,
                                  highlightthickness=1,
                                  highlightcolor=self.colors["tab_active"])
        self.cmd_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, pady=10, padx=(0, 8))
        self.cmd_entry.bind("", self.process_cmd)
        self.cmd_entry.bind("", self.cmd_history_up)
        self.cmd_entry.bind("", self.cmd_history_down)

        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥
        self.cmd_history = []
        self.cmd_history_index = -1

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        self._cmd_insert("T-Code Professional Terminal v2.0\n")
        self._cmd_insert("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞–∂–º–∏—Ç–µ Enter\n")
        self._cmd_insert("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è Python –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n")

    def create_git_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ Git"""
        git_frame = tk.Frame(self.tools_notebook, bg=self.colors["debugger_bg"])
        self.tools_notebook.add(git_frame, text="Git")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = tk.Frame(git_frame, bg=self.colors["debugger_bg"], height=35)
        header.pack(fill=tk.X, pady=(5, 0))
        header.pack_propagate(False)

        title = tk.Label(header, text="–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π",
                         bg=self.colors["debugger_bg"], fg="#d4d4d4",
                         font=("Segoe UI", 10, "bold"))
        title.pack(side=tk.LEFT, padx=10, pady=8)

        # –ö–Ω–æ–ø–∫–∏ Git
        button_frame = tk.Frame(git_frame, bg=self.colors["debugger_bg"])
        button_frame.pack(fill=tk.X, padx=10, pady=5)

        tk.Button(button_frame, text="Git Status", command=self.git_status,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)
        tk.Button(button_frame, text="Git Add", command=self.git_add,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)
        tk.Button(button_frame, text="Git Commit", command=self.git_commit,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", relief="flat").pack(side=tk.LEFT, padx=2)

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ Git
        self.git_output = scrolledtext.ScrolledText(
            git_frame,
            bg=self.colors["debugger_bg"],
            fg=self.colors["debugger_fg"],
            font=("Consolas", 9),
            state="disabled",
            relief="flat",
            padx=10, pady=5
        )
        self.git_output.pack(fill=tk.BOTH, expand=True, padx=8, pady=8)

    def init_enhanced_ai_agent(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò-–∞–≥–µ–Ω—Ç–∞"""
        ai_frame = tk.Frame(self.tools_notebook, bg=self.colors["chat_bg"])
        self.tools_notebook.add(ai_frame, text="–ò–ò –ü–æ–º–æ—â–Ω–∏–∫")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ò–ò
        ai_header = tk.Frame(ai_frame, bg=self.colors["chat_bg"], height=45)
        ai_header.pack(fill=tk.X, pady=(8, 0))
        ai_header.pack_propagate(False)

        ai_title = tk.Label(ai_header, text="–ò–ò –ü–æ–º–æ—â–Ω–∏–∫ (TinyLlama)",
                            bg=self.colors["chat_bg"], fg="#d4d4d4",
                            font=("Segoe UI", 11, "bold"))
        ai_title.pack(side=tk.LEFT, padx=12, pady=12)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        self.status_label = tk.Label(ai_header, text="–ì–æ—Ç–æ–≤",
                                     bg=self.colors["chat_bg"], fg="#4ec9b0",
                                     font=("Segoe UI", 9, "bold"))
        self.status_label.pack(side=tk.RIGHT, padx=12, pady=12)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º
        control_frame = tk.Frame(ai_frame, bg=self.colors["chat_bg"], height=40)
        control_frame.pack(fill=tk.X, pady=(0, 8))
        control_frame.pack_propagate(False)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        tk.Button(control_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", command=self.clear_chat,
                  bg=self.colors["btn_danger"], fg="#ffffff", font=("Segoe UI", 8),
                  relief="flat", borderwidth=0).pack(side=tk.LEFT, padx=12, pady=8)

        tk.Button(control_frame, text="–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", command=self.analyze_current_code,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", font=("Segoe UI", 8),
                  relief="flat", borderwidth=0).pack(side=tk.LEFT, padx=8, pady=8)

        tk.Button(control_frame, text="–û–±—ä—è—Å–Ω–∏—Ç—å", command=self.explain_code,
                  bg=self.colors["btn_normal"], fg="#d4d4d4", font=("Segoe UI", 8),
                  relief="flat", borderwidth=0).pack(side=tk.LEFT, padx=8, pady=8)

        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_container = tk.Frame(ai_frame, bg=self.colors["chat_bg"])
        chat_container.pack(fill=tk.BOTH, expand=True, padx=8, pady=(0, 8))

        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_display = scrolledtext.ScrolledText(
            chat_container,
            wrap='word',
            bg=self.colors["debugger_bg"],
            fg="#d4d4d4",
            font=("Segoe UI", 10),
            state="disabled",
            relief="flat",
            padx=12, pady=12
        )
        self.chat_display.pack(fill=tk.BOTH, expand=True, pady=(0, 12))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_chat_tags()

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_container = tk.Frame(chat_container, bg=self.colors["chat_bg"])
        input_container.pack(fill=tk.X, side=tk.BOTTOM)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.ai_input = tk.Text(
            input_container,
            height=3,
            bg=self.colors["input_bg"],
            fg="#d4d4d4",
            font=("Segoe UI", 10),
            insertbackground="#d4d4d4",
            relief="flat",
            wrap='word',
            padx=12, pady=10,
            borderwidth=1,
            highlightthickness=1,
            highlightcolor=self.colors["tab_active"]
        )
        self.ai_input.pack(fill=tk.X, pady=(0, 12))

        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        button_container = tk.Frame(input_container, bg=self.colors["chat_bg"])
        button_container.pack(fill=tk.X)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.send_button = tk.Button(
            button_container,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            bg=self.colors["btn_normal"],
            fg="#d4d4d4",
            font=("Segoe UI", 10),
            relief="flat",
            borderwidth=0,
            padx=20, pady=10,
            command=self.start_ai_query,
            cursor="hand2"
        )
        self.send_button.pack(side=tk.RIGHT, padx=(8, 0))

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        self.cancel_button = tk.Button(
            button_container,
            text="–û—Ç–º–µ–Ω–∞",
            bg=self.colors["btn_danger"],
            fg="#ffffff",
            font=("Segoe UI", 10),
            relief="flat",
            borderwidth=0,
            padx=20, pady=10,
            command=self.cancel_ai_request,
            cursor="hand2",
            state="disabled"
        )
        self.cancel_button.pack(side=tk.RIGHT, padx=(0, 8))

        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–ª–∞–≤–∏—à
        self.ai_input.bind("", lambda e: self.start_ai_query())
        self.ai_input.bind("", lambda e: None)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.add_system_message("–ò–ò –ü–æ–º–æ—â–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.add_system_message("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —É–ª—É—á—à–µ–Ω–∏—è")

    def setup_chat_tags(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
        self.chat_display.tag_configure("user",
                                        foreground=self.colors["user_msg"],
                                        font=("Segoe UI", 10, "bold"))

        self.chat_display.tag_configure("ai",
                                        foreground=self.colors["ai_msg"],
                                        font=("Segoe UI", 10, "bold"))

        self.chat_display.tag_configure("system",
                                        foreground=self.colors["system_msg"],
                                        font=("Segoe UI", 9, "bold"))

        self.chat_display.tag_configure("error",
                                        foreground=self.colors["error_msg"],
                                        font=("Segoe UI", 10, "bold"))

        self.chat_display.tag_configure("code",
                                        background=self.colors["code_bg"],
                                        foreground="#f8f8f2",
                                        font=("Consolas", 9),
                                        relief="solid",
                                        borderwidth=1)

        self.chat_display.tag_configure("timestamp",
                                        foreground="#6a9955",
                                        font=("Segoe UI", 8))

    # === –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π ===

    def open_folder(self):
        """–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
        folder_path = filedialog.askdirectory()
        if folder_path:
            self.project_explorer.load_directory(folder_path)
            self.project_explorer.current_path = folder_path

    def open_file_from_explorer(self, file_path):
        """–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–∑ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
            for i, tab in enumerate(self.file_tabs):
                if tab.path == file_path:
                    self.file_notebook.select(i)
                    return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            tab = FileTab(name=os.path.basename(file_path), content=content, path=file_path)
            self.create_editor_tab(tab, content)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")

    def save_file_as(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª –∫–∞–∫"""
        try:
            tab, input_text, _ = self.get_current_editor()

            filetypes = [
                ("Python files", "*.py"),
                ("T-Code files", "*.tcd"),
                ("Text files", "*.txt"),
                ("All files", "*.*")
            ]

            filepath = filedialog.asksaveasfilename(defaultextension=".py", filetypes=filetypes)
            if filepath:
                with open(filepath, "w", encoding="utf-8") as f:
                    f.write(input_text.get("1.0", tk.END))

                tab.path = filepath
                tab.name = os.path.basename(filepath)
                tab.saved = True

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏
                current_tab = self.file_notebook.select()
                self.file_notebook.tab(current_tab, text=tab.name)

                self.add_system_message(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {os.path.basename(filepath)}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def save_all_files(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã"""
        saved_count = 0
        for i, tab in enumerate(self.file_tabs):
            if not tab.saved and tab.path:
                try:
                    _, editor, _ = self.get_editor_by_index(i)
                    with open(tab.path, 'w', encoding='utf-8') as f:
                        f.write(editor.get("1.0", tk.END))
                    tab.saved = True
                    saved_count += 1
                except Exception:
                    pass

        if saved_count > 0:
            self.add_system_message(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {saved_count}")

    def close_current_file(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª"""
        if len(self.file_tabs) > 1:
            current_index = self.file_notebook.index(self.file_notebook.select())
            self.close_file_tab(current_index)

    def redo(self):
        """–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        try:
            _, input_text, _ = self.get_current_editor()
            input_text.edit_redo()
        except Exception:
            pass

    def cut(self):
        """–í—ã—Ä–µ–∑–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            _, input_text, _ = self.get_current_editor()
            input_text.event_generate(">")
        except Exception:
            pass

    def copy(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            _, input_text, _ = self.get_current_editor()
            input_text.event_generate(">")
        except Exception:
            pass

    def paste(self):
        """–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞"""
        try:
            _, input_text, _ = self.get_current_editor()
            input_text.event_generate(">")
        except Exception:
            pass

    